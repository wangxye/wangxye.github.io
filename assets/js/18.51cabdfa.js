(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{299:function(v,_,o){"use strict";o.r(_);var e=o(4),r=Object(e.a)({},(function(){var v=this,_=v.$createElement,o=v._self._c||_;return o("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[o("h1",{attrs:{id:"jvm"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[v._v("#")]),v._v(" JVM")]),v._v(" "),o("h2",{attrs:{id:"垃圾回收算法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收算法"}},[v._v("#")]),v._v(" 垃圾回收算法")]),v._v(" "),o("p",[v._v("简述标记清除算法、标记整理算法和标记复制算法")]),v._v(" "),o("p",[v._v("标记清除算法：先标记需清除的对象，之后统一回收。这种方法效率不高，会产生大量不连续的碎片。")]),v._v(" "),o("p",[v._v("标记整理算法：先标记存活对象，然后让所有存活对象向一端移动，之后清理端边界以外的内存")]),v._v(" "),o("p",[v._v("标记复制算法：将可用内存按容量划分为大小相等的两块，每次只使用其中一块。当使用的这块空间用完了，就将存活对象复制到另一块，再把已使用过的内存空间一次清理掉。")]),v._v(" "),o("p",[v._v("分代收集的原因：在新生代中，每次收集都会有大量对象死去，所以可以选择”标记-复制“算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。")]),v._v(" "),o("p",[o("strong",[v._v("堆内存常见分配策略：")])]),v._v(" "),o("ul",[o("li",[v._v("对象优先在eden区分配；")]),v._v(" "),o("li",[v._v("大对象直接进入老年代；")]),v._v(" "),o("li",[v._v("长期存活的对象将进入老年代；\n"),o("ul",[o("li",[v._v("对象晋升到老年代的年龄阈值，可以通过参数 "),o("code",[v._v("-XX:MaxTenuringThreshold")]),v._v(" 来设置。")])])]),v._v(" "),o("li",[v._v("动态对象年龄判定\n"),o("ul",[o("li",[v._v("当累积的某个年龄大小超过了 survivor 区的 50% 时（默认值是 50%），取这个年龄和 "),o("code",[v._v("MaxTenuringThreshold")]),v._v(" 中更小的一个值，作为新的晋升年龄阈值")])])]),v._v(" "),o("li",[v._v("空间分配担保，为了确保在 Minor GC 之前老年代本身还有容纳新生代所有对象的剩余空间。")])]),v._v(" "),o("blockquote",[o("p",[v._v("JDK 6 Update 24 之前，在发生 Minor GC 之前，虚拟机必须先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那这一次 Minor GC 可以确保是安全的。如果不成立，则虚拟机会先查看 "),o("code",[v._v("-XX:HandlePromotionFailure")]),v._v(" 参数的设置值是否允许担保失败(Handle Promotion Failure);如果允许，那会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次 Minor GC，尽管这次 Minor GC 是有风险的;如果小于，或者 "),o("code",[v._v("-XX: HandlePromotionFailure")]),v._v(" 设置不允许冒险，那这时就要改为进行一次  Full GC。")]),v._v(" "),o("p",[v._v("JDK 6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行 Minor GC，否则将进行 Full GC")])]),v._v(" "),o("p",[v._v("针对 HotSpot VM 的实现，它里面的 GC 其实准确分类只有两大种：")]),v._v(" "),o("p",[v._v("部分收集 (Partial GC)：")]),v._v(" "),o("ul",[o("li",[v._v("新生代收集（Minor GC / Young GC）：只对新生代进行垃圾收集；")]),v._v(" "),o("li",[v._v("老年代收集（Major GC / Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；")]),v._v(" "),o("li",[v._v("混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。")])]),v._v(" "),o("p",[v._v("整堆收集 (Full GC)：收集整个 Java 堆和方法区。")]),v._v(" "),o("p",[o("strong",[v._v("对象死亡判定方法：")])]),v._v(" "),o("ul",[o("li",[v._v("引用计数法，"),o("strong",[v._v("实现简单，效率高，但很难解决对象之间相互循环引用的问题")])]),v._v(" "),o("li",[v._v("可达性分析算法，通过一系列的称为 "),o("strong",[v._v("“GC Roots”")]),v._v(" 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的。\n"),o("ul",[o("li",[v._v("虚拟机栈(栈帧中的本地变量表)中引用的对象")]),v._v(" "),o("li",[v._v("本地方法栈(Native 方法)中引用的对象")]),v._v(" "),o("li",[v._v("方法区中类静态属性引用的对象")]),v._v(" "),o("li",[v._v("方法区中常量引用的对象")]),v._v(" "),o("li",[v._v("所有被同步锁持有的对象")])])])]),v._v(" "),o("p",[o("strong",[v._v('不可达对象并非"非死不可"：')])]),v._v(" "),o("p",[v._v("即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对象死亡，至少要经历两次标记过程；可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize 方法。当对象没有覆盖 finalize 方法，或 finalize 方法已经被虚拟机调用过时，虚拟机将这两种情况视为没有必要执行。")]),v._v(" "),o("p",[v._v("被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关联，否则就会被真的回收。")]),v._v(" "),o("p",[v._v("Java 对引用的概念进行了扩充，将引用分为强引用、软引用、弱引用、虚引用四种（引用强度逐渐减弱）")]),v._v(" "),o("ul",[o("li",[o("strong",[v._v("强引用")]),v._v("，当内存空间不足，Java 虚拟机宁愿抛出 "),o("code",[v._v("OutOfMemoryError")]),v._v(" 错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。")]),v._v(" "),o("li",[o("strong",[v._v("软引用")]),v._v("，如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。软引用可以和一个引用队列（"),o("code",[v._v("ReferenceQueue")]),v._v("）联合使用，如果软引用所引用的对象被垃圾回收，JAVA 虚拟机就会把这个软引用加入到与之关联的引用队列中。")]),v._v(" "),o("li",[o("strong",[v._v("弱引用")]),v._v("，在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。弱引用可以和一个引用队列（"),o("code",[v._v("ReferenceQueue")]),v._v("）联合使用，如果弱引用所引用的对象被垃圾回收，Java 虚拟机就会把这个弱引用加入到与之关联的引用队列中。")]),v._v(" "),o("li",[o("strong",[v._v("虚引用")]),v._v("，"),o("strong",[v._v("虚引用主要用来跟踪对象被垃圾回收的活动")]),v._v("。 虚引用必须和引用队列（"),o("code",[v._v("ReferenceQueue")]),v._v("）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。")])]),v._v(" "),o("p",[v._v("特别注意，在程序设计中一般很少使用弱引用与虚引用，使用软引用的情况较多，这是因为"),o("strong",[v._v("软引用可以加速 JVM 对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（"),o("code",[v._v("OutOfMemory")]),v._v("）等问题的产生")]),v._v("。")]),v._v(" "),o("p",[v._v("判定一个常量废弃的原则：")]),v._v(" "),o("blockquote",[o("p",[o("strong",[v._v("JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代")])]),v._v(" "),o("p",[o("strong",[v._v("JDK1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代")]),v._v(" 。")]),v._v(" "),o("p",[o("strong",[v._v("JDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)")])])]),v._v(" "),o("p",[v._v("判断一个类无用：")]),v._v(" "),o("ul",[o("li",[v._v("该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。")]),v._v(" "),o("li",[v._v("加载该类的 "),o("code",[v._v("ClassLoader")]),v._v(" 已经被回收。")]),v._v(" "),o("li",[v._v("该类对应的 "),o("code",[v._v("java.lang.Class")]),v._v(" 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。")])]),v._v(" "),o("p",[o("strong",[v._v("垃圾收集器：")])]),v._v(" "),o("ul",[o("li",[v._v("Serial 收集器，"),o("strong",[v._v("单线程")]),v._v("，只会使用一条垃圾收集线程去完成垃圾收集工作，在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ "),o("strong",[v._v('"Stop The World"')]),v._v(" ），直到它收集结束。\n"),o("ul",[o("li",[o("strong",[v._v("新生代采用标记-复制算法，老年代采用标记-整理算法。")])]),v._v(" "),o("li",[o("strong",[v._v("简单而高效（与其他收集器的单线程相比）")])]),v._v(" "),o("li",[v._v("多用于在 Client 模式")])])]),v._v(" "),o("li",[v._v("Par New 收集器，"),o("strong",[v._v("多线程")]),v._v("，"),o("strong",[v._v("除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。")]),v._v(" "),o("ul",[o("li",[o("strong",[v._v("新生代采用标记-复制算法，老年代采用标记-整理算法。")])]),v._v(" "),o("li",[v._v("多用于 Server 模式下")]),v._v(" "),o("li",[v._v("除了 Serial 收集器外，只有它能与 CMS 收集器配合工作")])])]),v._v(" "),o("li",[v._v("Parallel Scavenge 收集器，"),o("strong",[v._v("关注点是吞吐量（高效率的利用 CPU）。所谓吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值。")]),v._v(" "),o("ul",[o("li",[o("strong",[v._v("新生代采用标记-复制算法，老年代采用标记-整理算法。")])]),v._v(" "),o("li",[v._v("JDK1.8 默认使用的是 Parallel Scavenge + Parallel Old")])])]),v._v(" "),o("li",[v._v("Serial Old 收集器，"),o("strong",[v._v("Serial 收集器的老年代版本")]),v._v(" "),o("ul",[o("li",[v._v("一种用途是在 JDK1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用")]),v._v(" "),o("li",[v._v("另一种用途是作为 CMS 收集器的后备方案。")])])]),v._v(" "),o("li",[v._v("Parallel Old 收集器，**Parallel Scavenge 收集器的老年代版本。**多线程和“标记-整理”算法。")]),v._v(" "),o("li",[v._v("CMS 收集器，"),o("strong",[v._v("以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用。")]),v._v(" "),o("ul",[o("li",[o("strong",[v._v("“标记-清除”算法")])]),v._v(" "),o("li",[v._v("步骤：\n"),o("ul",[o("li",[o("strong",[v._v("初始标记：")]),v._v(" 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；")]),v._v(" "),o("li",[o("strong",[v._v("并发标记：")]),v._v(" 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。")]),v._v(" "),o("li",[o("strong",[v._v("重新标记：")]),v._v(" 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短")]),v._v(" "),o("li",[o("strong",[v._v("并发清除：")]),v._v(" 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。")])])]),v._v(" "),o("li",[v._v("主要优点："),o("strong",[v._v("并发收集、低停顿")]),v._v("。")]),v._v(" "),o("li",[v._v("三个明显的缺点：\n"),o("ul",[o("li",[o("strong",[v._v("对 CPU 资源敏感；")])]),v._v(" "),o("li",[o("strong",[v._v("无法处理浮动垃圾；")])]),v._v(" "),o("li",[o("strong",[v._v("它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。")])])])])])]),v._v(" "),o("li",[v._v("G1 收集器，"),o("strong",[v._v("一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征.")]),v._v(" "),o("ul",[o("li",[v._v("特点：\n"),o("ul",[o("li",[o("strong",[v._v("并行与并发")]),v._v("：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。")]),v._v(" "),o("li",[o("strong",[v._v("分代收集")]),v._v("：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。")]),v._v(" "),o("li",[o("strong",[v._v("空间整合")]),v._v("：与 CMS 的“标记-清理”算法不同，G1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的。")]),v._v(" "),o("li",[o("strong",[v._v("可预测的停顿")]),v._v("：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。")])])]),v._v(" "),o("li",[v._v("步骤\n"),o("ul",[o("li",[o("strong",[v._v("初始标记")])]),v._v(" "),o("li",[o("strong",[v._v("并发标记")])]),v._v(" "),o("li",[o("strong",[v._v("最终标记")])]),v._v(" "),o("li",[o("strong",[v._v("筛选回收")])])])]),v._v(" "),o("li",[o("strong",[v._v("G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来)")]),v._v(" 。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 G1 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。")])])]),v._v(" "),o("li",[v._v("ZGC 收集器，与 CMS 中的 ParNew 和 G1 类似，ZGC 也采用标记-复制算法，不过 ZGC 对该算法做了重大改进。在 ZGC 中出现 Stop The World 的情况会更少！")])]),v._v(" "),o("h2",{attrs:{id:"synchronized-锁优化"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-锁优化"}},[v._v("#")]),v._v(" synchronized 锁优化")]),v._v(" "),o("p",[v._v("JVM 基于进入和退出 Monitor 对象来实现方法同步和代码块同步，但是两者的实现细节不一样。")]),v._v(" "),o("ol",[o("li",[v._v("代码块同步：通过使用 monitorenter 和 monitorexit 指令实现的")]),v._v(" "),o("li",[v._v("同步方法：ACC_SYNCHRONIZED 修饰")])]),v._v(" "),o("p",[v._v("在 HotSpot 虚拟机中，对象在内存中的布局分为三块区域：对象头，实例数据和对齐填充。")]),v._v(" "),o("p",[v._v("对象头中包含两部分：MarkWord 和 类型指针。如果是数组对象的话，对象头还有一部分是存储数组的长度。")]),v._v(" "),o("p",[v._v("多线程下 synchronized 的加锁就是对同一个对象的对象头中的 MarkWord 中的变量进行CAS操作。")]),v._v(" "),o("p",[v._v("锁的升级过程可分为如下：无锁 -> 偏向锁 -> 轻量级锁 -> 重量级锁")]),v._v(" "),o("p",[o("strong",[v._v("1、偏向锁")]),v._v("是针对于一个线程而言的，线程获得锁之后就不会再有解锁等操作了，这样可以省略很多开销。")]),v._v(" "),o("p",[v._v("假如有两个线程来竞争该锁话，那么偏向锁就失效了，进而升级成轻量级锁了。")]),v._v(" "),o("blockquote",[o("p",[v._v("为什么要这样做呢？因为经验表明，其实大部分情况下，都会是同一个线程进入同一块同步代码块的。这也是为什么会有偏向锁出现的原因。")])]),v._v(" "),o("p",[v._v("如果支持偏向锁（没有计算 hashCode），那么在分配对象时，分配一个可偏向而未偏向的对象（MarkWord的最后 3 位为 101，并且 Thread Id 字段的值为 0）。")]),v._v(" "),o("p",[o("strong",[v._v("偏向锁的加锁")])]),v._v(" "),o("ul",[o("li",[v._v("偏向锁标志是未偏向状态，使用 CAS 将 MarkWord 中的线程ID设置为自己的线程ID\n"),o("ul",[o("li",[v._v("如果成功，则获取偏向锁成功。")]),v._v(" "),o("li",[v._v("如果失败，则进行锁升级。")])])]),v._v(" "),o("li",[v._v("偏向锁标志是已偏向状态\n"),o("ul",[o("li",[v._v("MarkWord 中的线程 ID 是自己的线程 ID，成功获取锁")]),v._v(" "),o("li",[v._v("MarkWord 中的线程 ID 不是自己的线程 ID，需要进行锁升级")])])])]),v._v(" "),o("p",[v._v("偏向锁的锁升级需要进行偏向锁的撤销。")]),v._v(" "),o("p",[o("strong",[v._v("偏向锁的撤销")])]),v._v(" "),o("ul",[o("li",[v._v("对象是不可偏向状态\n"),o("ul",[o("li",[v._v("不需要撤销")])])]),v._v(" "),o("li",[v._v("对象是可偏向状态\n"),o("ul",[o("li",[v._v("MarkWord 中指向的线程不存活\n"),o("ul",[o("li",[v._v("允许重偏向：退回到可偏向但未偏向的状态")]),v._v(" "),o("li",[v._v("不允许重偏向：变为无锁状态")])])]),v._v(" "),o("li",[v._v("MarkWord 中的线程存活、\n"),o("ul",[o("li",[v._v("线程ID指向的线程仍然拥有锁\n"),o("ul",[o("li",[v._v("升级为轻量级锁，将 mark word 复制到线程栈中")])])]),v._v(" "),o("li",[v._v("不再拥有锁\n"),o("ul",[o("li",[v._v("允许重偏向：退回到可偏向但未偏向的状态")]),v._v(" "),o("li",[v._v("不允许重偏向：变为无锁状态")])])])])])])])]),v._v(" "),o("p",[o("strong",[v._v("小结：")]),v._v(" 撤销偏向的操作需要在全局检查点执行。我们假设线程A曾经拥有锁（不确定是否释放锁）， 线程B来竞争锁对象，如果当线程A不在拥有锁时或者死亡时，线程B直接去尝试获得锁（根据是否 允许重偏向（"),o("code",[v._v("rebiasing")]),v._v("），获得偏向锁或者轻量级锁）；如果线程A仍然拥有锁，那么锁 升级为轻量级锁，线程B自旋请求获得锁。")]),v._v(" "),o("p",[o("strong",[v._v("2、轻量级锁")]),v._v("是指仅仅使用 CAS 进行操作，实现获取锁。")]),v._v(" "),o("p",[o("strong",[v._v("加锁流程")])]),v._v(" "),o("p",[v._v("首先，线程由偏向锁升级为轻量级锁时，会先把"),o("strong",[v._v("锁的对象头MarkWord复制一份到线程的栈帧中，建立一个名为锁记录空间（Lock Record），用于存储当前Mark Word的拷贝")]),v._v("。")]),v._v(" "),o("p",[v._v("其次，"),o("strong",[v._v("线程尝试使用 CAS 将对象头中的 Mark Word 替换为指向锁记录")]),v._v("（"),o("code",[v._v("Lock Record")]),v._v("）的指针，如果成功，当前线程获得轻量级锁，如果失败，虚拟机先检查当前对象头的 Mark Word 是否指向当前线程的栈帧，如果指向，则说明当前线程已经拥有这个对象的锁，则可以直接进入同步块 执行操作，否则表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。当竞争线程的自旋次数 达到界限值（"),o("code",[v._v("threshold")]),v._v("），轻量级锁将会膨胀为重量级锁。")]),v._v(" "),o("p",[v._v("如果线程发现对象头中Mark Word已经存在指向自己栈帧的指针，即线程已经获得轻量级锁，那么只需要将0存储在自己的栈帧中（此过程称为"),o("strong",[v._v("递归加锁")]),v._v("）；在解锁的时候，如果发现锁记录的内容为0， 那么只需要移除栈帧中的锁记录即可，而不需要更新Mark Word。")]),v._v(" "),o("p",[o("strong",[v._v("撤销流程")])]),v._v(" "),o("p",[v._v("轻量级锁解锁时，如果对象的Mark Word仍然指向着线程的锁记录，会使用CAS操作， 将Dispalced Mark Word替换到对象头，如果成功，则表示没有竞争发生。如果失败， 表示当前锁存在锁竞争，锁就会膨胀为重量级锁。")]),v._v(" "),o("p",[o("strong",[v._v("3、重量级锁")]),v._v("（"),o("code",[v._v("heavy weight lock")]),v._v("），是使用操作系统互斥量（"),o("code",[v._v("mutex")]),v._v("）来实现的传统锁。 当所有对锁的优化都失效时，将退回到重量级锁。它与轻量级锁不同竞争的线程不再通过自旋来竞争线程， 而是直接进入堵塞状态，此时不消耗CPU，然后等拥有锁的线程释放锁后，唤醒堵塞的线程， 然后线程再次竞争锁。但是注意，当锁膨胀（"),o("code",[v._v("inflate")]),v._v("）为重量锁时，就不能再退回到轻量级锁。")]),v._v(" "),o("h2",{attrs:{id:"aqs"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#aqs"}},[v._v("#")]),v._v(" AQS")]),v._v(" "),o("p",[o("strong",[v._v("AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。")])]),v._v(" "),o("blockquote",[o("p",[v._v("CLH(Craig, Landin and Hagersten)队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。")])]),v._v(" "),o("p",[v._v("AQS 使用一个 int 成员变量来表示同步状态，通过内置的 FIFO 队列来完成获取资源线程的排队工作。AQS 使用 CAS 对该同步状态进行原子操作实现对其值的修改。")]),v._v(" "),o("p",[o("strong",[v._v("AQS 定义两种资源共享方式")])]),v._v(" "),o("ul",[o("li",[o("p",[v._v("Exclusive")]),v._v(" "),o("p",[v._v("（独占）：只有一个线程能执行，如"),o("code",[v._v("ReentrantLock")]),v._v("。又可分为公平锁和非公平锁：")]),v._v(" "),o("ul",[o("li",[v._v("公平锁：按照线程在队列中的排队顺序，先到者先拿到锁")]),v._v(" "),o("li",[v._v("非公平锁：当线程要获取锁时，无视队列顺序直接去抢锁，谁抢到就是谁的")])])]),v._v(" "),o("li",[o("p",[o("strong",[v._v("Share")]),v._v("（共享）：多个线程可同时执行，如"),o("code",[v._v("CountDownLatch")]),v._v("、"),o("code",[v._v("Semaphore")]),v._v("、 "),o("code",[v._v("CyclicBarrier")]),v._v("、"),o("code",[v._v("ReadWriteLock")])]),v._v(" "),o("ul",[o("li",[o("strong",[o("code",[v._v("Semaphore")]),v._v("(信号量)-允许多个线程同时访问：")]),v._v(" "),o("code",[v._v("synchronized")]),v._v(" 和 "),o("code",[v._v("ReentrantLock")]),v._v(" 都是一次只允许一个线程访问某个资源，"),o("code",[v._v("Semaphore")]),v._v("(信号量)可以指定多个线程同时访问某个资源。")]),v._v(" "),o("li",[o("strong",[o("code",[v._v("CountDownLatch")]),v._v("（倒计时器）：")]),v._v(" "),o("code",[v._v("CountDownLatch")]),v._v(" 是一个同步工具类，用来"),o("strong",[v._v("协调多个线程之间的同步")]),v._v("。这个工具通常用来控制线程等待，它可以让某一个线程等待直到倒计时结束，再开始执行。")]),v._v(" "),o("li",[o("strong",[o("code",[v._v("CyclicBarrier")]),v._v("(循环栅栏)：")]),v._v(" "),o("code",[v._v("CyclicBarrier")]),v._v(" 和 "),o("code",[v._v("CountDownLatch")]),v._v(" 非常类似，它也可以实现线程间的技术等待，但是它的功能比 "),o("code",[v._v("CountDownLatch")]),v._v(" 更加复杂和强大。主要应用场景和 "),o("code",[v._v("CountDownLatch")]),v._v(" 类似。"),o("code",[v._v("CyclicBarrier")]),v._v(" 的字面意思是可循环使用（"),o("code",[v._v("Cyclic")]),v._v("）的屏障（"),o("code",[v._v("Barrier")]),v._v("）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。"),o("code",[v._v("CyclicBarrier")]),v._v(" 默认的构造方法是 "),o("code",[v._v("CyclicBarrier(int parties)")]),v._v("，其参数表示屏障拦截的线程数量，每个线程调用 "),o("code",[v._v("await()")]),v._v(" 方法告诉 "),o("code",[v._v("CyclicBarrier")]),v._v(" 我已经到达了屏障，然后当前线程被阻塞。")])])])]),v._v(" "),o("p",[o("code",[v._v("ReentrantReadWriteLock")]),v._v(" 可以看成是组合式，因为 "),o("code",[v._v("ReentrantReadWriteLock")]),v._v(" 也就是读写锁允许多个线程同时对某一资源进行读。")]),v._v(" "),o("p",[v._v("不同的自定义同步器争用共享资源的方式也不同。"),o("strong",[v._v("自定义同步器在实现时只需要实现共享资源 state 的获取与释放方式即可")]),v._v("。")]),v._v(" "),o("p",[v._v("同步器的设计是基于模板方法模式的，如果需要自定义同步器一般的方式是这样（模板方法模式很经典的一个应用）：")]),v._v(" "),o("ul",[o("li",[v._v("使用者继承 "),o("code",[v._v("AbstractQueuedSynchronizer")]),v._v(" 并重写指定的方法。（对于共享资源 state 的获取和释放）")]),v._v(" "),o("li",[v._v("将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。")])]),v._v(" "),o("p",[v._v("这和我们以往通过实现接口的方式有很大区别，这是模板方法模式很经典的一个运用。")]),v._v(" "),o("p",[v._v("一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现"),o("code",[v._v("tryAcquire-tryRelease")]),v._v("、"),o("code",[v._v("tryAcquireShared-tryReleaseShared")]),v._v("中的一种即可。但 AQS 也支持自定义同步器同时实现独占和共享两种方式，如"),o("code",[v._v("ReentrantReadWriteLock")]),v._v("。")]),v._v(" "),o("p",[o("strong",[v._v("“可重入锁”")]),v._v(" 指的是自己可以再次获取自己的内部锁。同一个线程每次获取锁，锁的计数器都自增 1，所以要等到锁的计数器下降为 0 时才能释放锁。")]),v._v(" "),o("p",[v._v("相比"),o("code",[v._v("synchronized")]),v._v("，"),o("code",[v._v("ReentrantLock")]),v._v("增加了一些高级功能。主要来说主要有三点：")]),v._v(" "),o("ul",[o("li",[o("strong",[v._v("等待可中断")]),v._v(" : "),o("code",[v._v("ReentrantLock")]),v._v("提供了一种能够中断等待锁的线程的机制，通过 "),o("code",[v._v("lock.lockInterruptibly()")]),v._v(" 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。")]),v._v(" "),o("li",[o("strong",[v._v("可实现公平锁")]),v._v(" : "),o("code",[v._v("ReentrantLock")]),v._v("可以指定是公平锁还是非公平锁。而"),o("code",[v._v("synchronized")]),v._v("只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。"),o("code",[v._v("ReentrantLock")]),v._v("默认情况是非公平的，可以通过 "),o("code",[v._v("ReentrantLock")]),v._v("类的"),o("code",[v._v("ReentrantLock(boolean fair)")]),v._v("构造方法来制定是否是公平的。")]),v._v(" "),o("li",[o("strong",[v._v("可实现选择性通知（锁可以绑定多个条件）")]),v._v(": "),o("code",[v._v("synchronized")]),v._v("关键字与"),o("code",[v._v("wait()")]),v._v("和"),o("code",[v._v("notify()")]),v._v("/"),o("code",[v._v("notifyAll()")]),v._v("方法相结合可以实现等待/通知机制。"),o("code",[v._v("ReentrantLock")]),v._v("类当然也可以实现，但是需要借助于"),o("code",[v._v("Condition")]),v._v("接口与"),o("code",[v._v("newCondition()")]),v._v("方法。")])]),v._v(" "),o("blockquote",[o("p",[o("code",[v._v("Condition")]),v._v("是 JDK1.5 之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个"),o("code",[v._v("Lock")]),v._v("对象中可以创建多个"),o("code",[v._v("Condition")]),v._v("实例（即对象监视器），"),o("strong",[v._v("线程对象可以注册在指定的"),o("code",[v._v("Condition")]),v._v("中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用"),o("code",[v._v("notify()/notifyAll()")]),v._v("方法进行通知时，被通知的线程是由 JVM 选择的，用"),o("code",[v._v("ReentrantLock")]),v._v("类结合"),o("code",[v._v("Condition")]),v._v("实例可以实现“选择性通知”")]),v._v(" ，这个功能非常重要，而且是 Condition 接口默认提供的。而**"),o("code",[v._v("synchronized")]),v._v("关键字就相当于整个 Lock 对象中只有一个"),o("code",[v._v("Condition")]),v._v("实例**，所有的线程都注册在它一个身上。如果执行"),o("code",[v._v("notifyAll()")]),v._v("方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而"),o("code",[v._v("Condition")]),v._v("实例的"),o("code",[v._v("signalAll()")]),v._v("方法 只会唤醒注册在该"),o("code",[v._v("Condition")]),v._v("实例中的所有等待线程。")])]),v._v(" "),o("h2",{attrs:{id:"volatile"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[v._v("#")]),v._v(" volatile")]),v._v(" "),o("p",[o("code",[v._v("volatile")]),v._v(" 关键字 除了防止 JVM 的指令重排 ，还有一个重要的作用就是保证变量的可见性。")]),v._v(" "),o("p",[o("strong",[v._v("CPU Cache 缓存的是内存数据用于解决 CPU 处理速度和内存不匹配的问题，内存缓存的是硬盘数据用于解决硬盘访问速度过慢的问题。")]),v._v(" CPU Cache 的工作方式：")]),v._v(" "),o("p",[v._v("先复制一份数据到 CPU Cache 中，当 CPU 需要用到的时候就可以直接从 CPU Cache 中读取数据，当运算完成后，再将运算得到的数据写回 Main Memory 中。但是，这样存在 "),o("strong",[v._v("内存缓存不一致性的问题")]),v._v(" ！比如我执行一个 i++操作的话，如果两个线程同时执行的话，假设两个线程从 CPU Cache 中读取的 i=1，两个线程做了 1++运算完之后再写回 Main Memory 之后 i=2，而正确结果应该是 i=3。")]),v._v(" "),o("p",[o("strong",[v._v("CPU 为了解决内存缓存不一致性问题可以通过制定缓存一致协议或者其他手段来解决。")])]),v._v(" "),o("p",[o("strong",[v._v("并发编程的重要特征：")])]),v._v(" "),o("ul",[o("li",[o("strong",[v._v("原子性")]),v._v(" : 一个的操作或者多次操作，要么所有的操作全部都得到执行并且不会收到任何因素的干扰而中断，要么所有的操作都执行，要么都不执行。"),o("code",[v._v("synchronized")]),v._v(" 可以保证代码片段的原子性。")]),v._v(" "),o("li",[o("strong",[v._v("可见性")]),v._v(" ：当一个线程对共享变量进行了修改，那么另外的线程都是立即可以看到修改后的最新值。"),o("code",[v._v("volatile")]),v._v(" 关键字可以保证共享变量的可见性。")]),v._v(" "),o("li",[o("strong",[v._v("有序性")]),v._v(" ：代码在执行的过程中的先后顺序，Java 在编译器以及运行期间的优化，代码的执行顺序未必就是编写代码时候的顺序。"),o("code",[v._v("volatile")]),v._v(" 关键字可以禁止指令进行重排序优化。")])]),v._v(" "),o("p",[o("strong",[o("code",[v._v("synchronized")]),v._v(" 和 "),o("code",[v._v("volatile")]),v._v(" 区别：")])]),v._v(" "),o("p",[o("code",[v._v("synchronized")]),v._v(" 关键字和 "),o("code",[v._v("volatile")]),v._v(" 关键字是两个互补的存在，而不是对立的存在！")]),v._v(" "),o("ul",[o("li",[o("strong",[o("code",[v._v("volatile")]),v._v(" 关键字")]),v._v("是线程同步的"),o("strong",[v._v("轻量级实现")]),v._v("，所以 "),o("strong",[o("code",[v._v("volatile")]),v._v("性能肯定比"),o("code",[v._v("synchronized")]),v._v("关键字要好")]),v._v(" 。但是 "),o("strong",[o("code",[v._v("volatile")]),v._v(" 关键字只能用于变量而 "),o("code",[v._v("synchronized")]),v._v(" 关键字可以修饰方法以及代码块")]),v._v(" 。")]),v._v(" "),o("li",[o("strong",[o("code",[v._v("volatile")]),v._v(" 关键字能保证数据的可见性，但不能保证数据的原子性。"),o("code",[v._v("synchronized")]),v._v(" 关键字两者都能保证。")])]),v._v(" "),o("li",[o("strong",[o("code",[v._v("volatile")]),v._v("关键字主要用于解决变量在多个线程之间的可见性，而 "),o("code",[v._v("synchronized")]),v._v(" 关键字解决的是多个线程之间访问资源的同步性。")])])]),v._v(" "),o("p",[o("strong",[v._v("ThreadLocal 内存泄漏问题")])]),v._v(" "),o("p",[o("code",[v._v("ThreadLocalMap")]),v._v(" 中使用的 key 为 "),o("code",[v._v("ThreadLocal")]),v._v(" 的弱引用,而 value 是强引用。所以，如果 "),o("code",[v._v("ThreadLocal")]),v._v(" 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉。这样一来，"),o("code",[v._v("ThreadLocalMap")]),v._v(" 中就会出现 key 为 null 的 Entry。假如我们不做任何措施的话，value 永远无法被 GC 回收，这个时候就可能会产生内存泄露。ThreadLocalMap 实现中已经考虑了这种情况，在调用 "),o("code",[v._v("set()")]),v._v("、"),o("code",[v._v("get()")]),v._v("、"),o("code",[v._v("remove()")]),v._v(" 方法的时候，会清理掉 key 为 null 的记录。使用完 "),o("code",[v._v("ThreadLocal")]),v._v("方法后 最好手动调用"),o("code",[v._v("remove()")]),v._v("方法")]),v._v(" "),o("h2",{attrs:{id:"线程池"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[v._v("#")]),v._v(" 线程池")]),v._v(" "),o("p",[o("strong",[v._v("线程池提供了一种限制和管理资源（包括执行一个任务）。 每个线程池还维护一些基本统计信息，例如已完成任务的数量。使用线程池的好处：")])]),v._v(" "),o("ul",[o("li",[o("strong",[v._v("降低资源消耗")]),v._v("。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。")]),v._v(" "),o("li",[o("strong",[v._v("提高响应速度")]),v._v("。当任务到达时，任务可以不需要等到线程创建就能立即执行。")]),v._v(" "),o("li",[o("strong",[v._v("提高线程的可管理性")]),v._v("。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。")])]),v._v(" "),o("p",[o("strong",[o("code",[v._v("ThreadPoolExecutor")]),v._v(" 3 个最重要的参数：")])]),v._v(" "),o("ul",[o("li",[o("strong",[o("code",[v._v("corePoolSize")]),v._v(" :")]),v._v(" 核心线程数定义了最小可以同时运行的线程数量。")]),v._v(" "),o("li",[o("strong",[o("code",[v._v("maximumPoolSize")]),v._v(" :")]),v._v(" 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。")]),v._v(" "),o("li",[o("strong",[o("code",[v._v("workQueue")]),v._v(":")]),v._v(" 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。")])]),v._v(" "),o("p",[o("code",[v._v("ThreadPoolExecutor")]),v._v("其他常见参数:")]),v._v(" "),o("ul",[o("li",[o("strong",[o("code",[v._v("keepAliveTime")])]),v._v(":当线程池中的线程数量大于 "),o("code",[v._v("corePoolSize")]),v._v(" 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 "),o("code",[v._v("keepAliveTime")]),v._v("才会被回收销毁；")]),v._v(" "),o("li",[o("strong",[o("code",[v._v("unit")])]),v._v(" : "),o("code",[v._v("keepAliveTime")]),v._v(" 参数的时间单位。")]),v._v(" "),o("li",[o("strong",[o("code",[v._v("threadFactory")])]),v._v(" :executor 创建新线程的时候会用到。")]),v._v(" "),o("li",[o("strong",[o("code",[v._v("handler")])]),v._v(" ：饱和策略，指如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时。\n"),o("ul",[o("li",[o("strong",[o("code",[v._v("ThreadPoolExecutor.AbortPolicy")]),v._v("：")]),v._v(" **抛出 "),o("code",[v._v("RejectedExecutionException")]),v._v("**来拒绝新任务的处理。")]),v._v(" "),o("li",[o("strong",[o("code",[v._v("ThreadPoolExecutor.CallerRunsPolicy")]),v._v("：")]),v._v(" "),o("strong",[v._v("调用执行自己的线程运行任")]),v._v("务，也就是直接在调用"),o("code",[v._v("execute")]),v._v("方法的线程中运行("),o("code",[v._v("run")]),v._v(")被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。")]),v._v(" "),o("li",[o("strong",[o("code",[v._v("ThreadPoolExecutor.DiscardPolicy")]),v._v("：")]),v._v(" "),o("strong",[v._v("不处理新任务，直接丢弃掉。")])]),v._v(" "),o("li",[o("strong",[o("code",[v._v("ThreadPoolExecutor.DiscardOldestPolicy")]),v._v("：")]),v._v(" "),o("strong",[v._v("此策略将丢弃最早的未处理的任务请求。")])])])])]),v._v(" "),o("p",[v._v("对于可伸缩的应用程序，建议使用 "),o("code",[v._v("ThreadPoolExecutor.CallerRunsPolicy")]),v._v("。当最大池被填满时，此策略为我们提供可伸缩队列。")])])}),[],!1,null,null,null);_.default=r.exports}}]);